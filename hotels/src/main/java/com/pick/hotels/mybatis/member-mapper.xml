<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	이 파일은 SQL 명령만 보관하는 파일
	따라서 외부에서 접근할 수 있도록 namespace를 지정
 -->
 
<mapper namespace="member">
	
	<!-- 회원가입 -->
	
	<insert id="regist" parameterType="memberDto">
		insert into member values(
		member_seq.nextval, #{member_name}, #{member_phone},
		#{member_zip_code}, #{member_basic_addr}, #{member_detail_addr},
		'일반', sysdate, #{member_email1}, #{member_email2},
		#{member_id}, #{member_pw}, #{member_birthday},sysdate
		)
	</insert>
	
	<!-- 아이디 중복검사 -->
	
	<select id="id_ckeck" parameterType="string" resultType="memberDto">
		select * from member where member_id = #{member_id}
	</select>
	
	<!-- 핸드폰 중복검사 -->
	<select id="check_phone" parameterType="String" resultType="memberDto">
		select * from member where member_phone = #{member_phone}
	</select>
	
	<!-- 로그인 -->
	<select id="login" parameterType="memberDto" resultType="memberDto">
		select * from member where id = #{member_id} and pw = #{member_pw}
	</select>

	<!-- 회원정보 상세보기(나연) -->
	<select id="get" parameterType="int" resultType="memberDto">
		select * from member where member_no = #{member_no}
	</select>
	
	<!-- 최종접속시간 -->
	<update id="lasttime" parameterType="memberDto">
		update member set member_recent = sysdate where member_id = #{member_id}
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="delete" parameterType="string">
		delete member where member_id = #{member_id}
	</delete>
	
	<!-- 회원 정보 변경 -->
	<update id="change" parameterType="memberDto">
		update member
			set
				member_phone = #{member_phone},
				member_zip_code = #{member_zip_code},
				member_basic_addr = #{member_basic_addr},
				member_detail_addr = #{member_detail_addr},
				member_email1 = #{member_email1},
				member_email2 = #{member_email2}
			where
				member_id = #{member_id}
	</update>
	
	<!-- 비밀번호 회원 찾기 -->
	<select id="find_pw" parameterType="memberDto" resultType="memberDto">
		select * from member where member_id = #{member_id} and member_phone = #{member_phone} and member_birthday = to_date(#{member_birthday},'yyyy/mm/dd')
	</select>
	
	<!-- 회원 비밀번호 변경 -->
	
	<update id="changePw" parameterType="memberDto">
		update member
			set
				member_pw = #{member_pw}
			where
				member_no = #{member_no}
	</update>
	
	<!-- 회원 아이디 찾기 -->
	<select id="find_id" parameterType="memberDto" resultType="memberDto">
		select * from member
			where
				member_name = #{member_name} and member_phone = #{member_phone} and member_birthday = to_date(#{member_birthday},'yyyy/mm/dd')
	</select>
	
	<!-- 회원변경 비밀번호 찾기 -->
	<select id="check_pw" parameterType="memberDto" resultType="memberDto">
		select * from member
			where
				member_id = #{member_id} and member_pw = #{member_pw}
	</select>
	
	<!-- 로그인 회원 비밀번호 변경 -->
	<update id="change_pw" parameterType="memberDto">
		update member
			set
				member_pw = #{member_pw}
			where
				member_no = #{member_no}
	</update>
	
	
	
	
	
	
	
	
	
	<!-- 관리자 -->
	
	<!-- 회원 리스트 -->
	<select id="list" parameterType="map" resultType="memberDto">
		<!-- 부등호 등 태그 형식에서 사용 불가한 글자를 허용하는 지역 생성 -->
		<![CDATA[
		select *  from(
    		select rownum r, m.* from(select * from member 
		]]>
			<if test="type != null and keyword != null">
			where
				${type} like '%' || #{keyword} || '%'
			</if>
		<![CDATA[
			 order by member_no desc )m)  where r >= #{start} and r <= #{end}
		]]>
	</select>
	
	
	<!-- 목록/ 검색일때 리스트 갯수 구하는거  -->
	<select id="count" parameterType="map" resultType="int">
		select count(*) from member
		<if test="type != null and keyword != null">
			where ${type} like '%' || #{keyword} || '%'
		</if>
	</select>
	
	
	<!-- 관리자의 회원 정보 수정  -->
	<update id="edit_member" parameterType="memberDto">
		update member
			set
				member_name = #{member_name},
				member_zip_code = #{member_zip_code},
				member_basic_addr = #{member_basic_addr},
				member_detail_addr = #{member_detail_addr},
				member_birthday = #{member_birthday},
				member_phone = #{member_phone},
				member_auth = #{member_auth}
			where
				member_id = #{member_id}
	</update>                                
	
	
	<!-- 전체 회원 수 -->
	<select id="total_count" resultType="int">
		select count(*) from member
	</select>
	
	
	<!-- 최근 7일 가입 회원 수 -->
	<select id="recent_count" resultType="int">
		select count(*) from member where member_when between (sysdate-7) and (sysdate+1)
	</select>
	
	
	<!-- 월별 회원 가입 수 -->
	<select id="monthly_count" resultType="memberCountVO">
		select 
  			to_char(member_when,'YYYY,MM') monthly, count(*) count
    			from member
    			 where member_auth != '관리자'
   			group by to_char(member_when,'YYYY,MM')
    		order by monthly asc
	</select>
	
	<!-- 테스트 회원 가입  -->
	<insert id="testinsert" parameterType="memberDto">
		insert into member values(
		member_seq.nextval, #{member_name}, #{member_phone},
		#{member_zip_code}, #{member_basic_addr}, #{member_detail_addr},
		'일반', to_date(#{member_when}, 'YYYYMMDD'), #{member_email1}, #{member_email2},
		#{member_id}, #{member_pw}, #{member_birthday},sysdate
		)
	</insert>
	
	
</mapper>