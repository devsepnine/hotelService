<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	이 파일은 SQL 명령만 보관하는 파일
	따라서 외부에서 접근할 수 있도록 namespace를 지정
 -->
 
 <mapper namespace="restaurant">
 
 	<!-- 레스토랑 등록하기  -->
 	<insert id="regist" parameterType="restaurantDto">
 		insert into restaurant values(#{restaurant_no}, #{restaurant_name}, #{restaurant_postcode}, #{restaurant_addr1}, #{restaurant_addr2}, #{restaurant_lat}, #{restaurant_lng}, #{restaurant_info})
 	</insert>
 	
 	
 	<!-- 레스토랑 상세보기 -->
 	<select id="get" parameterType="int" resultType="restaurantDto">
		select * from restaurant where restaurant_no = #{restaurant_no}
 	</select>
 	
 	
 	<!-- 레스토랑 삭제 -->
 	<delete id="exit" parameterType="int">
 		delete restaurant where restaurant_no = #{restaurant_no}
 	</delete>
 	
 	
 	<!-- 레스토랑 리스트 -->
	<select id="listVO" resultType="restaurantListVO" parameterType="map">
		SELECT * FROM (
			SELECT ROWNUM R, TMP.* FROM(
				SELECT 
					*
				FROM (
			    	SELECT 
			        	RT.restaurant_name,
				        RT.restaurant_addr1, 
				        RT.restaurant_addr2, 
				        RT.restaurant_no, 
				        RTF.restaurant_file_name,
				        ROW_NUMBER() OVER(PARTITION BY RT.restaurant_no ORDER BY RTF.restaurant_file_no ASC) as rn
					FROM 
			        	restaurant RT inner join restaurant_file RTF on RT.restaurant_no = RTF.restaurant_no
				) WHERE rn=1 
				<if test="type != null and keyword != null">
					AND ${type} like '%'||#{keyword}||'%'
				</if>
			)TMP
		) WHERE R BETWEEN #{start} and #{end}
	</select>
	

	<!-- 목록/ 검색 각각의 글 수를 구하는 거 -->	
	<select id="count" parameterType="map" resultType="int">
		SELECT count(*) FROM (
			SELECT ROWNUM R, TMP.* FROM(
				SELECT 
					*
				FROM (
			    	SELECT 
			        	RT.restaurant_name,
				        RT.restaurant_addr1, 
				        RT.restaurant_addr2, 
				        RT.restaurant_no, 
				        RTF.restaurant_file_name,
				        ROW_NUMBER() OVER(PARTITION BY RT.restaurant_no ORDER BY RTF.restaurant_file_no ASC) as rn
					FROM 
			        	restaurant RT inner join restaurant_file RTF on RT.restaurant_no = RTF.restaurant_no
				) WHERE rn=1 
				<if test="type != null and keyword != null">
					AND ${type} like '%'||#{keyword}||'%'
				</if>
			)TMP
		)
	</select>
	
	
	<!-- 시퀀스 번호 -->
	<select id="seq" resultType="int">
		select restaurant_seq.nextval from dual
	</select>
	
	
	<!-- 레스토랑 수정 -->
	<update id="edit" parameterType="restaurantDto">
		update restaurant 
			set restaurant_name = #{restaurant_name}, restaurant_postcode = #{restaurant_postcode}, restaurant_addr1 = #{restaurant_addr1}, restaurant_addr2 = #{restaurant_addr2}, restaurant_lat = #{restaurant_lat}, restaurant_lng = #{restaurant_lng}, restaurant_info = #{restaurant_info}
		where restaurant_no = #{restaurant_no}
	</update>

 	             
<!-- 	인근 레스토랑 -->
	<select id="near_by" parameterType="map" resultType="restaurantDto">
		select * from RESTAURANT
		where
		(
		#{lat_p} > RESTAURANT_LAT
		and
		RESTAURANT_LAT > #{lat_m}
		)
		and
		(
		#{long_p} > RESTAURANT_Lng
		and
		RESTAURANT_Lng > #{long_m}
		)
	</select>
 </mapper>